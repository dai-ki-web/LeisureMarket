{"version":3,"sources":["index.js","fs.js","copy-file.js","common/get-options.js","common/owner.js","common/file-url-to-path/index.js","common/node.js","common/file-url-to-path/polyfill.js","cp/index.js","cp/polyfill.js","errors.js","mkdir/index.js","mkdir/polyfill.js","mkdtemp.js","rm/index.js","rm/polyfill.js","with-temp-dir.js","write-file.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AGRA,ADGA,ADGA,ADGA;AGRA,ADGA,ADGA,ADGA;AGRA,ADGA,ADGA;AELA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;AGRA,AFMA,ACHA,AFMA;AGRA,AFMA,ACHA,AFMA;AGRA,AFMA,ACHA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AFMA,AGTA,AFMA,AFMA;AGRA,AENA,AJYA,AGTA,AFMA,AFMA;AGRA,AENA,AJYA,AGTA,AFMA,AFMA;AGRA,AENA,AJYA,AGTA,AFMA,AFMA;AGRA,AENA,AJYA,AGTA,AFMA,AFMA,AMlBA;AHUA,AENA,AJYA,AGTA,AFMA,AFMA,AMlBA;AHUA,AENA,AJYA,AGTA,AFMA,AFMA,AMlBA;AHUA,AENA,AJYA,AGTA,AFMA,AFMA,AMlBA,ACHA;AJaA,AENA,AJYA,ACHA,AFMA,AMlBA,ACHA;AJaA,AENA,AJYA,ACHA,AIZA,ACHA;AJaA,AENA,AHSA,AIZA,ACHA,ACHA;ALgBA,AENA,AHSA,AIZA,ACHA,ACHA;ALgBA,AENA,AHSA,AIZA,ACHA,ACHA;AHUA,AHSA,AIZA,ACHA,ACHA,ACHA;AJaA,AHSA,AIZA,ACHA,ACHA,ACHA;AJaA,AHSA,AIZA,ACHA,ACHA,ACHA;AJaA,AHSA,AIZA,ACHA,ACHA,ACHA,ACHA;ALgBA,AHSA,AIZA,ACHA,ACHA,ACHA,ACHA;ALgBA,AHSA,AIZA,ACHA,ACHA,ACHA,ACHA;ALgBA,AHSA,AIZA,ACHA,ACHA,ACHA,ACHA,ACHA;ANmBA,AHSA,AIZA,ACHA,ACHA,ACHA,ACHA,ACHA;ANmBA,AHSA,AIZA,ACHA,ACHA,ACHA,ACHA,ACHA;ANmBA,AHSA,AIZA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;APsBA,AHSA,AIZA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;APsBA,AHSA,AIZA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;APsBA,AHSA,AIZA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;ARyBA,AHSA,AIZA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;ARyBA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;ARyBA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AT4BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AT4BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AT4BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,ACHA,ACHA,ACHA,AENA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,AENA,ACHA,AENA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,AENA,ACHA,AENA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA,ACHA;AV+BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA,ACHA;AT4BA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AHSA,AKfA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AENA,AGTA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ARyBA,AENA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,ACHA,AKfA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmfile":"index.js","sourcesContent":["module.exports = {\n  ...require('./fs.js'),\n  copyFile: require('./copy-file.js'),\n  cp: require('./cp/index.js'),\n  mkdir: require('./mkdir/index.js'),\n  mkdtemp: require('./mkdtemp.js'),\n  rm: require('./rm/index.js'),\n  withTempDir: require('./with-temp-dir.js'),\n  writeFile: require('./write-file.js'),\n}\n","const fs = require('fs')\nconst promisify = require('@gar/promisify')\n\n// this module returns the core fs module wrapped in a proxy that promisifies\n// method calls within the getter. we keep it in a separate module so that the\n// overridden methods have a consistent way to get to promisified fs methods\n// without creating a circular dependency\nmodule.exports = promisify(fs)\n","const fs = require('./fs.js')\nconst getOptions = require('./common/get-options.js')\nconst owner = require('./common/owner.js')\n\nconst copyFile = async (src, dest, opts) => {\n  const options = getOptions(opts, {\n    copy: ['mode', 'owner'],\n    wrap: 'mode',\n  })\n\n  const { uid, gid } = await owner.validate(dest, options.owner)\n\n  // the node core method as of 16.5.0 does not support the mode being in an\n  // object, so we have to pass the mode value directly\n  const result = await fs.copyFile(src, dest, options.mode)\n\n  await owner.update(dest, uid, gid)\n\n  return result\n}\n\nmodule.exports = copyFile\n","// given an input that may or may not be an object, return an object that has\n// a copy of every defined property listed in 'copy'. if the input is not an\n// object, assign it to the property named by 'wrap'\nconst getOptions = (input, { copy, wrap }) => {\n  const result = {}\n\n  if (input && typeof input === 'object') {\n    for (const prop of copy) {\n      if (input[prop] !== undefined) {\n        result[prop] = input[prop]\n      }\n    }\n  } else {\n    result[wrap] = input\n  }\n\n  return result\n}\n\nmodule.exports = getOptions\n","const { dirname, resolve } = require('path')\n\nconst fileURLToPath = require('./file-url-to-path/index.js')\nconst fs = require('../fs.js')\n\n// given a path, find the owner of the nearest parent\nconst find = async (path) => {\n  // if we have no getuid, permissions are irrelevant on this platform\n  if (!process.getuid) {\n    return {}\n  }\n\n  // fs methods accept URL objects with a scheme of file: so we need to unwrap\n  // those into an actual path string before we can resolve it\n  const resolved = path != null && path.href && path.origin\n    ? resolve(fileURLToPath(path))\n    : resolve(path)\n\n  let stat\n\n  try {\n    stat = await fs.lstat(resolved)\n  } finally {\n    // if we got a stat, return its contents\n    if (stat) {\n      return { uid: stat.uid, gid: stat.gid }\n    }\n\n    // try the parent directory\n    if (resolved !== dirname(resolved)) {\n      return find(dirname(resolved))\n    }\n\n    // no more parents, never got a stat, just return an empty object\n    return {}\n  }\n}\n\n// given a path, uid, and gid update the ownership of the path if necessary\nconst update = async (path, uid, gid) => {\n  // nothing to update, just exit\n  if (uid === undefined && gid === undefined) {\n    return\n  }\n\n  try {\n    // see if the permissions are already the same, if they are we don't\n    // need to do anything, so return early\n    const stat = await fs.stat(path)\n    if (uid === stat.uid && gid === stat.gid) {\n      return\n    }\n  } catch (err) {}\n\n  try {\n    await fs.chown(path, uid, gid)\n  } catch (err) {}\n}\n\n// accepts a `path` and the `owner` property of an options object and normalizes\n// it into an object with numerical `uid` and `gid`\nconst validate = async (path, input) => {\n  let uid\n  let gid\n\n  if (typeof input === 'string' || typeof input === 'number') {\n    uid = input\n    gid = input\n  } else if (input && typeof input === 'object') {\n    uid = input.uid\n    gid = input.gid\n  }\n\n  if (uid === 'inherit' || gid === 'inherit') {\n    const owner = await find(path)\n    if (uid === 'inherit') {\n      uid = owner.uid\n    }\n\n    if (gid === 'inherit') {\n      gid = owner.gid\n    }\n  }\n\n  return { uid, gid }\n}\n\nmodule.exports = {\n  find,\n  update,\n  validate,\n}\n","const url = require('url')\n\nconst node = require('../node.js')\nconst polyfill = require('./polyfill.js')\n\nconst useNative = node.satisfies('>=10.12.0')\n\nconst fileURLToPath = (path) => {\n  // the polyfill is tested separately from this module, no need to hack\n  // process.version to try to trigger it just for coverage\n  // istanbul ignore next\n  return useNative\n    ? url.fileURLToPath(path)\n    : polyfill(path)\n}\n\nmodule.exports = fileURLToPath\n","const semver = require('semver')\n\nconst satisfies = (range) => {\n  return semver.satisfies(process.version, range, { includePrerelease: true })\n}\n\nmodule.exports = {\n  satisfies,\n}\n","const { URL, domainToUnicode } = require('url')\n\nconst CHAR_LOWERCASE_A = 97\nconst CHAR_LOWERCASE_Z = 122\n\nconst isWindows = process.platform === 'win32'\n\nclass ERR_INVALID_FILE_URL_HOST extends TypeError {\n  constructor (platform) {\n    super(`File URL host must be \"localhost\" or empty on ${platform}`)\n    this.code = 'ERR_INVALID_FILE_URL_HOST'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nclass ERR_INVALID_FILE_URL_PATH extends TypeError {\n  constructor (msg) {\n    super(`File URL path ${msg}`)\n    this.code = 'ERR_INVALID_FILE_URL_PATH'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor (name, actual) {\n    super(`The \"${name}\" argument must be one of type string or an instance ` +\n      `of URL. Received type ${typeof actual} ${actual}`)\n    this.code = 'ERR_INVALID_ARG_TYPE'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nclass ERR_INVALID_URL_SCHEME extends TypeError {\n  constructor (expected) {\n    super(`The URL must be of scheme ${expected}`)\n    this.code = 'ERR_INVALID_URL_SCHEME'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nconst isURLInstance = (input) => {\n  return input != null && input.href && input.origin\n}\n\nconst getPathFromURLWin32 = (url) => {\n  const hostname = url.hostname\n  let pathname = url.pathname\n  for (let n = 0; n < pathname.length; n++) {\n    if (pathname[n] === '%') {\n      const third = pathname.codePointAt(n + 2) | 0x20\n      if ((pathname[n + 1] === '2' && third === 102) ||\n        (pathname[n + 1] === '5' && third === 99)) {\n        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded \\\\ or / characters')\n      }\n    }\n  }\n\n  pathname = pathname.replace(/\\//g, '\\\\')\n  pathname = decodeURIComponent(pathname)\n  if (hostname !== '') {\n    return `\\\\\\\\${domainToUnicode(hostname)}${pathname}`\n  }\n\n  const letter = pathname.codePointAt(1) | 0x20\n  const sep = pathname[2]\n  if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z ||\n    (sep !== ':')) {\n    throw new ERR_INVALID_FILE_URL_PATH('must be absolute')\n  }\n\n  return pathname.slice(1)\n}\n\nconst getPathFromURLPosix = (url) => {\n  if (url.hostname !== '') {\n    throw new ERR_INVALID_FILE_URL_HOST(process.platform)\n  }\n\n  const pathname = url.pathname\n\n  for (let n = 0; n < pathname.length; n++) {\n    if (pathname[n] === '%') {\n      const third = pathname.codePointAt(n + 2) | 0x20\n      if (pathname[n + 1] === '2' && third === 102) {\n        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded / characters')\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nconst fileURLToPath = (path) => {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isURLInstance(path)) {\n    throw new ERR_INVALID_ARG_TYPE('path', ['string', 'URL'], path)\n  }\n\n  if (path.protocol !== 'file:') {\n    throw new ERR_INVALID_URL_SCHEME('file')\n  }\n\n  return isWindows\n    ? getPathFromURLWin32(path)\n    : getPathFromURLPosix(path)\n}\n\nmodule.exports = fileURLToPath\n","const fs = require('../fs.js')\nconst getOptions = require('../common/get-options.js')\nconst node = require('../common/node.js')\nconst polyfill = require('./polyfill.js')\n\n// node 16.7.0 added fs.cp\nconst useNative = node.satisfies('>=16.7.0')\n\nconst cp = async (src, dest, opts) => {\n  const options = getOptions(opts, {\n    copy: ['dereference', 'errorOnExist', 'filter', 'force', 'preserveTimestamps', 'recursive'],\n  })\n\n  // the polyfill is tested separately from this module, no need to hack\n  // process.version to try to trigger it just for coverage\n  // istanbul ignore next\n  return useNative\n    ? fs.cp(src, dest, options)\n    : polyfill(src, dest, options)\n}\n\nmodule.exports = cp\n","// this file is a modified version of the code in node 17.2.0\n// which is, in turn, a modified version of the fs-extra module on npm\n// node core changes:\n// - Use of the assert module has been replaced with core's error system.\n// - All code related to the glob dependency has been removed.\n// - Bring your own custom fs module is not currently supported.\n// - Some basic code cleanup.\n// changes here:\n// - remove all callback related code\n// - drop sync support\n// - change assertions back to non-internal methods (see options.js)\n// - throws ENOTDIR when rmdir gets an ENOENT for a path that exists in Windows\n\n\nconst {\n  ERR_FS_CP_DIR_TO_NON_DIR,\n  ERR_FS_CP_EEXIST,\n  ERR_FS_CP_EINVAL,\n  ERR_FS_CP_FIFO_PIPE,\n  ERR_FS_CP_NON_DIR_TO_DIR,\n  ERR_FS_CP_SOCKET,\n  ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY,\n  ERR_FS_CP_UNKNOWN,\n  ERR_FS_EISDIR,\n  ERR_INVALID_ARG_TYPE,\n} = require('../errors.js')\nconst {\n  constants: {\n    errno: {\n      EEXIST,\n      EISDIR,\n      EINVAL,\n      ENOTDIR,\n    },\n  },\n} = require('os')\nconst {\n  chmod,\n  copyFile,\n  lstat,\n  mkdir,\n  readdir,\n  readlink,\n  stat,\n  symlink,\n  unlink,\n  utimes,\n} = require('../fs.js')\nconst {\n  dirname,\n  isAbsolute,\n  join,\n  parse,\n  resolve,\n  sep,\n  toNamespacedPath,\n} = require('path')\nconst { fileURLToPath } = require('url')\n\nconst defaultOptions = {\n  dereference: false,\n  errorOnExist: false,\n  filter: undefined,\n  force: true,\n  preserveTimestamps: false,\n  recursive: false,\n}\n\nasync function cp (src, dest, opts) {\n  if (opts != null && typeof opts !== 'object') {\n    throw new ERR_INVALID_ARG_TYPE('options', ['Object'], opts)\n  }\n  return cpFn(\n    toNamespacedPath(getValidatedPath(src)),\n    toNamespacedPath(getValidatedPath(dest)),\n    { ...defaultOptions, ...opts })\n}\n\nfunction getValidatedPath (fileURLOrPath) {\n  const path = fileURLOrPath != null && fileURLOrPath.href\n      && fileURLOrPath.origin\n    ? fileURLToPath(fileURLOrPath)\n    : fileURLOrPath\n  return path\n}\n\nasync function cpFn (src, dest, opts) {\n  // Warn about using preserveTimestamps on 32-bit node\n  // istanbul ignore next\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    const warning = 'Using the preserveTimestamps option in 32-bit ' +\n      'node is not recommended'\n    process.emitWarning(warning, 'TimestampPrecisionWarning')\n  }\n  const stats = await checkPaths(src, dest, opts)\n  const { srcStat, destStat } = stats\n  await checkParentPaths(src, srcStat, dest)\n  if (opts.filter) {\n    return handleFilter(checkParentDir, destStat, src, dest, opts)\n  }\n  return checkParentDir(destStat, src, dest, opts)\n}\n\nasync function checkPaths (src, dest, opts) {\n  const { 0: srcStat, 1: destStat } = await getStats(src, dest, opts)\n  if (destStat) {\n    if (areIdentical(srcStat, destStat)) {\n      throw new ERR_FS_CP_EINVAL({\n        message: 'src and dest cannot be the same',\n        path: dest,\n        syscall: 'cp',\n        errno: EINVAL,\n      })\n    }\n    if (srcStat.isDirectory() && !destStat.isDirectory()) {\n      throw new ERR_FS_CP_DIR_TO_NON_DIR({\n        message: `cannot overwrite directory ${src} ` +\n            `with non-directory ${dest}`,\n        path: dest,\n        syscall: 'cp',\n        errno: EISDIR,\n      })\n    }\n    if (!srcStat.isDirectory() && destStat.isDirectory()) {\n      throw new ERR_FS_CP_NON_DIR_TO_DIR({\n        message: `cannot overwrite non-directory ${src} ` +\n            `with directory ${dest}`,\n        path: dest,\n        syscall: 'cp',\n        errno: ENOTDIR,\n      })\n    }\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new ERR_FS_CP_EINVAL({\n      message: `cannot copy ${src} to a subdirectory of self ${dest}`,\n      path: dest,\n      syscall: 'cp',\n      errno: EINVAL,\n    })\n  }\n  return { srcStat, destStat }\n}\n\nfunction areIdentical (srcStat, destStat) {\n  return destStat.ino && destStat.dev && destStat.ino === srcStat.ino &&\n    destStat.dev === srcStat.dev\n}\n\nfunction getStats (src, dest, opts) {\n  const statFunc = opts.dereference ?\n    (file) => stat(file, { bigint: true }) :\n    (file) => lstat(file, { bigint: true })\n  return Promise.all([\n    statFunc(src),\n    statFunc(dest).catch((err) => {\n      // istanbul ignore next: unsure how to cover.\n      if (err.code === 'ENOENT') {\n        return null\n      }\n      // istanbul ignore next: unsure how to cover.\n      throw err\n    }),\n  ])\n}\n\nasync function checkParentDir (destStat, src, dest, opts) {\n  const destParent = dirname(dest)\n  const dirExists = await pathExists(destParent)\n  if (dirExists) {\n    return getStatsForCopy(destStat, src, dest, opts)\n  }\n  await mkdir(destParent, { recursive: true })\n  return getStatsForCopy(destStat, src, dest, opts)\n}\n\nfunction pathExists (dest) {\n  return stat(dest).then(\n    () => true,\n    // istanbul ignore next: not sure when this would occur\n    (err) => (err.code === 'ENOENT' ? false : Promise.reject(err)))\n}\n\n// Recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\nasync function checkParentPaths (src, srcStat, dest) {\n  const srcParent = resolve(dirname(src))\n  const destParent = resolve(dirname(dest))\n  if (destParent === srcParent || destParent === parse(destParent).root) {\n    return\n  }\n  let destStat\n  try {\n    destStat = await stat(destParent, { bigint: true })\n  } catch (err) {\n    // istanbul ignore else: not sure when this would occur\n    if (err.code === 'ENOENT') {\n      return\n    }\n    // istanbul ignore next: not sure when this would occur\n    throw err\n  }\n  if (areIdentical(srcStat, destStat)) {\n    throw new ERR_FS_CP_EINVAL({\n      message: `cannot copy ${src} to a subdirectory of self ${dest}`,\n      path: dest,\n      syscall: 'cp',\n      errno: EINVAL,\n    })\n  }\n  return checkParentPaths(src, srcStat, destParent)\n}\n\nconst normalizePathToArray = (path) =>\n  resolve(path).split(sep).filter(Boolean)\n\n// Return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\nfunction isSrcSubdir (src, dest) {\n  const srcArr = normalizePathToArray(src)\n  const destArr = normalizePathToArray(dest)\n  return srcArr.every((cur, i) => destArr[i] === cur)\n}\n\nasync function handleFilter (onInclude, destStat, src, dest, opts, cb) {\n  const include = await opts.filter(src, dest)\n  if (include) {\n    return onInclude(destStat, src, dest, opts, cb)\n  }\n}\n\nfunction startCopy (destStat, src, dest, opts) {\n  if (opts.filter) {\n    return handleFilter(getStatsForCopy, destStat, src, dest, opts)\n  }\n  return getStatsForCopy(destStat, src, dest, opts)\n}\n\nasync function getStatsForCopy (destStat, src, dest, opts) {\n  const statFn = opts.dereference ? stat : lstat\n  const srcStat = await statFn(src)\n  // istanbul ignore else: can't portably test FIFO\n  if (srcStat.isDirectory() && opts.recursive) {\n    return onDir(srcStat, destStat, src, dest, opts)\n  } else if (srcStat.isDirectory()) {\n    throw new ERR_FS_EISDIR({\n      message: `${src} is a directory (not copied)`,\n      path: src,\n      syscall: 'cp',\n      errno: EINVAL,\n    })\n  } else if (srcStat.isFile() ||\n            srcStat.isCharacterDevice() ||\n            srcStat.isBlockDevice()) {\n    return onFile(srcStat, destStat, src, dest, opts)\n  } else if (srcStat.isSymbolicLink()) {\n    return onLink(destStat, src, dest)\n  } else if (srcStat.isSocket()) {\n    throw new ERR_FS_CP_SOCKET({\n      message: `cannot copy a socket file: ${dest}`,\n      path: dest,\n      syscall: 'cp',\n      errno: EINVAL,\n    })\n  } else if (srcStat.isFIFO()) {\n    throw new ERR_FS_CP_FIFO_PIPE({\n      message: `cannot copy a FIFO pipe: ${dest}`,\n      path: dest,\n      syscall: 'cp',\n      errno: EINVAL,\n    })\n  }\n  // istanbul ignore next: should be unreachable\n  throw new ERR_FS_CP_UNKNOWN({\n    message: `cannot copy an unknown file type: ${dest}`,\n    path: dest,\n    syscall: 'cp',\n    errno: EINVAL,\n  })\n}\n\nfunction onFile (srcStat, destStat, src, dest, opts) {\n  if (!destStat) {\n    return _copyFile(srcStat, src, dest, opts)\n  }\n  return mayCopyFile(srcStat, src, dest, opts)\n}\n\nasync function mayCopyFile (srcStat, src, dest, opts) {\n  if (opts.force) {\n    await unlink(dest)\n    return _copyFile(srcStat, src, dest, opts)\n  } else if (opts.errorOnExist) {\n    throw new ERR_FS_CP_EEXIST({\n      message: `${dest} already exists`,\n      path: dest,\n      syscall: 'cp',\n      errno: EEXIST,\n    })\n  }\n}\n\nasync function _copyFile (srcStat, src, dest, opts) {\n  await copyFile(src, dest)\n  if (opts.preserveTimestamps) {\n    return handleTimestampsAndMode(srcStat.mode, src, dest)\n  }\n  return setDestMode(dest, srcStat.mode)\n}\n\nasync function handleTimestampsAndMode (srcMode, src, dest) {\n  // Make sure the file is writable before setting the timestamp\n  // otherwise open fails with EPERM when invoked with 'r+'\n  // (through utimes call)\n  if (fileIsNotWritable(srcMode)) {\n    await makeFileWritable(dest, srcMode)\n    return setDestTimestampsAndMode(srcMode, src, dest)\n  }\n  return setDestTimestampsAndMode(srcMode, src, dest)\n}\n\nfunction fileIsNotWritable (srcMode) {\n  return (srcMode & 0o200) === 0\n}\n\nfunction makeFileWritable (dest, srcMode) {\n  return setDestMode(dest, srcMode | 0o200)\n}\n\nasync function setDestTimestampsAndMode (srcMode, src, dest) {\n  await setDestTimestamps(src, dest)\n  return setDestMode(dest, srcMode)\n}\n\nfunction setDestMode (dest, srcMode) {\n  return chmod(dest, srcMode)\n}\n\nasync function setDestTimestamps (src, dest) {\n  // The initial srcStat.atime cannot be trusted\n  // because it is modified by the read(2) system call\n  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n  const updatedSrcStat = await stat(src)\n  return utimes(dest, updatedSrcStat.atime, updatedSrcStat.mtime)\n}\n\nfunction onDir (srcStat, destStat, src, dest, opts) {\n  if (!destStat) {\n    return mkDirAndCopy(srcStat.mode, src, dest, opts)\n  }\n  return copyDir(src, dest, opts)\n}\n\nasync function mkDirAndCopy (srcMode, src, dest, opts) {\n  await mkdir(dest)\n  await copyDir(src, dest, opts)\n  return setDestMode(dest, srcMode)\n}\n\nasync function copyDir (src, dest, opts) {\n  const dir = await readdir(src)\n  for (let i = 0; i < dir.length; i++) {\n    const item = dir[i]\n    const srcItem = join(src, item)\n    const destItem = join(dest, item)\n    const { destStat } = await checkPaths(srcItem, destItem, opts)\n    await startCopy(destStat, srcItem, destItem, opts)\n  }\n}\n\nasync function onLink (destStat, src, dest) {\n  let resolvedSrc = await readlink(src)\n  if (!isAbsolute(resolvedSrc)) {\n    resolvedSrc = resolve(dirname(src), resolvedSrc)\n  }\n  if (!destStat) {\n    return symlink(resolvedSrc, dest)\n  }\n  let resolvedDest\n  try {\n    resolvedDest = await readlink(dest)\n  } catch (err) {\n    // Dest exists and is a regular file or directory,\n    // Windows may throw UNKNOWN error. If dest already exists,\n    // fs throws error anyway, so no need to guard against it here.\n    // istanbul ignore next: can only test on windows\n    if (err.code === 'EINVAL' || err.code === 'UNKNOWN') {\n      return symlink(resolvedSrc, dest)\n    }\n    // istanbul ignore next: should not be possible\n    throw err\n  }\n  if (!isAbsolute(resolvedDest)) {\n    resolvedDest = resolve(dirname(dest), resolvedDest)\n  }\n  if (isSrcSubdir(resolvedSrc, resolvedDest)) {\n    throw new ERR_FS_CP_EINVAL({\n      message: `cannot copy ${resolvedSrc} to a subdirectory of self ` +\n            `${resolvedDest}`,\n      path: dest,\n      syscall: 'cp',\n      errno: EINVAL,\n    })\n  }\n  // Do not copy if src is a subdir of dest since unlinking\n  // dest in this case would result in removing src contents\n  // and therefore a broken symlink would be created.\n  const srcStat = await stat(src)\n  if (srcStat.isDirectory() && isSrcSubdir(resolvedDest, resolvedSrc)) {\n    throw new ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY({\n      message: `cannot overwrite ${resolvedDest} with ${resolvedSrc}`,\n      path: dest,\n      syscall: 'cp',\n      errno: EINVAL,\n    })\n  }\n  return copyLink(resolvedSrc, dest)\n}\n\nasync function copyLink (resolvedSrc, dest) {\n  await unlink(dest)\n  return symlink(resolvedSrc, dest)\n}\n\nmodule.exports = cp\n","\nconst { inspect } = require('util')\n\n// adapted from node's internal/errors\n// https://github.com/nodejs/node/blob/c8a04049/lib/internal/errors.js\n\n// close copy of node's internal SystemError class.\nclass SystemError {\n  constructor (code, prefix, context) {\n    // XXX context.code is undefined in all constructors used in cp/polyfill\n    // that may be a bug copied from node, maybe the constructor should use\n    // `code` not `errno`?  nodejs/node#41104\n    let message = `${prefix}: ${context.syscall} returned ` +\n                  `${context.code} (${context.message})`\n\n    if (context.path !== undefined) {\n      message += ` ${context.path}`\n    }\n    if (context.dest !== undefined) {\n      message += ` => ${context.dest}`\n    }\n\n    this.code = code\n    Object.defineProperties(this, {\n      name: {\n        value: 'SystemError',\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n      message: {\n        value: message,\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n      info: {\n        value: context,\n        enumerable: true,\n        configurable: true,\n        writable: false,\n      },\n      errno: {\n        get () {\n          return context.errno\n        },\n        set (value) {\n          context.errno = value\n        },\n        enumerable: true,\n        configurable: true,\n      },\n      syscall: {\n        get () {\n          return context.syscall\n        },\n        set (value) {\n          context.syscall = value\n        },\n        enumerable: true,\n        configurable: true,\n      },\n    })\n\n    if (context.path !== undefined) {\n      Object.defineProperty(this, 'path', {\n        get () {\n          return context.path\n        },\n        set (value) {\n          context.path = value\n        },\n        enumerable: true,\n        configurable: true,\n      })\n    }\n\n    if (context.dest !== undefined) {\n      Object.defineProperty(this, 'dest', {\n        get () {\n          return context.dest\n        },\n        set (value) {\n          context.dest = value\n        },\n        enumerable: true,\n        configurable: true,\n      })\n    }\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')] (_recurseTimes, ctx) {\n    return inspect(this, {\n      ...ctx,\n      getters: true,\n      customInspect: false,\n    })\n  }\n}\n\nfunction E (code, message) {\n  module.exports[code] = class NodeError extends SystemError {\n    constructor (ctx) {\n      super(code, message, ctx)\n    }\n  }\n}\n\nE('ERR_FS_CP_DIR_TO_NON_DIR', 'Cannot overwrite directory with non-directory')\nE('ERR_FS_CP_EEXIST', 'Target already exists')\nE('ERR_FS_CP_EINVAL', 'Invalid src or dest')\nE('ERR_FS_CP_FIFO_PIPE', 'Cannot copy a FIFO pipe')\nE('ERR_FS_CP_NON_DIR_TO_DIR', 'Cannot overwrite non-directory with directory')\nE('ERR_FS_CP_SOCKET', 'Cannot copy a socket file')\nE('ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY', 'Cannot overwrite symlink in subdirectory of self')\nE('ERR_FS_CP_UNKNOWN', 'Cannot copy an unknown file type')\nE('ERR_FS_EISDIR', 'Path is a directory')\n\nmodule.exports.ERR_INVALID_ARG_TYPE = class ERR_INVALID_ARG_TYPE extends Error {\n  constructor (name, expected, actual) {\n    super()\n    this.code = 'ERR_INVALID_ARG_TYPE'\n    this.message = `The ${name} argument must be ${expected}. Received ${typeof actual}`\n  }\n}\n","const fs = require('../fs.js')\nconst getOptions = require('../common/get-options.js')\nconst node = require('../common/node.js')\nconst owner = require('../common/owner.js')\n\nconst polyfill = require('./polyfill.js')\n\n// node 10.12.0 added the options parameter, which allows recursive and mode\n// properties to be passed\nconst useNative = node.satisfies('>=10.12.0')\n\n// extends mkdir with the ability to specify an owner of the new dir\nconst mkdir = async (path, opts) => {\n  const options = getOptions(opts, {\n    copy: ['mode', 'recursive', 'owner'],\n    wrap: 'mode',\n  })\n  const { uid, gid } = await owner.validate(path, options.owner)\n\n  // the polyfill is tested separately from this module, no need to hack\n  // process.version to try to trigger it just for coverage\n  // istanbul ignore next\n  const result = useNative\n    ? await fs.mkdir(path, options)\n    : await polyfill(path, options)\n\n  await owner.update(path, uid, gid)\n\n  return result\n}\n\nmodule.exports = mkdir\n","const { dirname } = require('path')\n\nconst fileURLToPath = require('../common/file-url-to-path/index.js')\nconst fs = require('../fs.js')\n\nconst defaultOptions = {\n  mode: 0o777,\n  recursive: false,\n}\n\nconst mkdir = async (path, opts) => {\n  const options = { ...defaultOptions, ...opts }\n\n  // if we're not in recursive mode, just call the real mkdir with the path and\n  // the mode option only\n  if (!options.recursive) {\n    return fs.mkdir(path, options.mode)\n  }\n\n  const makeDirectory = async (dir, mode) => {\n    // we can't use dirname directly since these functions support URL\n    // objects with the file: protocol as the path input, so first we get a\n    // string path, then we can call dirname on that\n    const parent = dir != null && dir.href && dir.origin\n      ? dirname(fileURLToPath(dir))\n      : dirname(dir)\n\n    // if the parent is the dir itself, try to create it. anything but EISDIR\n    // should be rethrown\n    if (parent === dir) {\n      try {\n        await fs.mkdir(dir, opts)\n      } catch (err) {\n        if (err.code !== 'EISDIR') {\n          throw err\n        }\n      }\n      return undefined\n    }\n\n    try {\n      await fs.mkdir(dir, mode)\n      return dir\n    } catch (err) {\n      // ENOENT means the parent wasn't there, so create that\n      if (err.code === 'ENOENT') {\n        const made = await makeDirectory(parent, mode)\n        await makeDirectory(dir, mode)\n        // return the shallowest path we created, i.e. the result of creating\n        // the parent\n        return made\n      }\n\n      // an EEXIST means there's already something there\n      // an EROFS means we have a read-only filesystem and can't create a dir\n      // any other error is fatal and we should give up now\n      if (err.code !== 'EEXIST' && err.code !== 'EROFS') {\n        throw err\n      }\n\n      // stat the directory, if the result is a directory, then we successfully\n      // created this one so return its path. otherwise, we reject with the\n      // original error by ignoring the error in the catch\n      try {\n        const stat = await fs.stat(dir)\n        if (stat.isDirectory()) {\n          // if it already existed, we didn't create anything so return\n          // undefined\n          return undefined\n        }\n      } catch (_) {}\n\n      // if the thing that's there isn't a directory, then just re-throw\n      throw err\n    }\n  }\n\n  return makeDirectory(path, options.mode)\n}\n\nmodule.exports = mkdir\n","const { dirname, sep } = require('path')\n\nconst fs = require('./fs.js')\nconst getOptions = require('./common/get-options.js')\nconst owner = require('./common/owner.js')\n\nconst mkdtemp = async (prefix, opts) => {\n  const options = getOptions(opts, {\n    copy: ['encoding', 'owner'],\n    wrap: 'encoding',\n  })\n\n  // mkdtemp relies on the trailing path separator to indicate if it should\n  // create a directory inside of the prefix. if that's the case then the root\n  // we infer ownership from is the prefix itself, otherwise it's the dirname\n  // /tmp -> /tmpABCDEF, infers from /\n  // /tmp/ -> /tmp/ABCDEF, infers from /tmp\n  const root = prefix.endsWith(sep) ? prefix : dirname(prefix)\n  const { uid, gid } = await owner.validate(root, options.owner)\n\n  const result = await fs.mkdtemp(prefix, options)\n\n  await owner.update(result, uid, gid)\n\n  return result\n}\n\nmodule.exports = mkdtemp\n","const fs = require('../fs.js')\nconst getOptions = require('../common/get-options.js')\nconst node = require('../common/node.js')\nconst polyfill = require('./polyfill.js')\n\n// node 14.14.0 added fs.rm, which allows both the force and recursive options\nconst useNative = node.satisfies('>=14.14.0')\n\nconst rm = async (path, opts) => {\n  const options = getOptions(opts, {\n    copy: ['retryDelay', 'maxRetries', 'recursive', 'force'],\n  })\n\n  // the polyfill is tested separately from this module, no need to hack\n  // process.version to try to trigger it just for coverage\n  // istanbul ignore next\n  return useNative\n    ? fs.rm(path, options)\n    : polyfill(path, options)\n}\n\nmodule.exports = rm\n","// this file is a modified version of the code in node core >=14.14.0\n// which is, in turn, a modified version of the rimraf module on npm\n// node core changes:\n// - Use of the assert module has been replaced with core's error system.\n// - All code related to the glob dependency has been removed.\n// - Bring your own custom fs module is not currently supported.\n// - Some basic code cleanup.\n// changes here:\n// - remove all callback related code\n// - drop sync support\n// - change assertions back to non-internal methods (see options.js)\n// - throws ENOTDIR when rmdir gets an ENOENT for a path that exists in Windows\nconst errnos = require('os').constants.errno\nconst { join } = require('path')\nconst fs = require('../fs.js')\n\n// error codes that mean we need to remove contents\nconst notEmptyCodes = new Set([\n  'ENOTEMPTY',\n  'EEXIST',\n  'EPERM',\n])\n\n// error codes we can retry later\nconst retryCodes = new Set([\n  'EBUSY',\n  'EMFILE',\n  'ENFILE',\n  'ENOTEMPTY',\n  'EPERM',\n])\n\nconst isWindows = process.platform === 'win32'\n\nconst defaultOptions = {\n  retryDelay: 100,\n  maxRetries: 0,\n  recursive: false,\n  force: false,\n}\n\n// this is drastically simplified, but should be roughly equivalent to what\n// node core throws\nclass ERR_FS_EISDIR extends Error {\n  constructor (path) {\n    super()\n    this.info = {\n      code: 'EISDIR',\n      message: 'is a directory',\n      path,\n      syscall: 'rm',\n      errno: errnos.EISDIR,\n    }\n    this.name = 'SystemError'\n    this.code = 'ERR_FS_EISDIR'\n    this.errno = errnos.EISDIR\n    this.syscall = 'rm'\n    this.path = path\n    this.message = `Path is a directory: ${this.syscall} returned ` +\n      `${this.info.code} (is a directory) ${path}`\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nclass ENOTDIR extends Error {\n  constructor (path) {\n    super()\n    this.name = 'Error'\n    this.code = 'ENOTDIR'\n    this.errno = errnos.ENOTDIR\n    this.syscall = 'rmdir'\n    this.path = path\n    this.message = `not a directory, ${this.syscall} '${this.path}'`\n  }\n\n  toString () {\n    return `${this.name}: ${this.code}: ${this.message}`\n  }\n}\n\n// force is passed separately here because we respect it for the first entry\n// into rimraf only, any further calls that are spawned as a result (i.e. to\n// delete content within the target) will ignore ENOENT errors\nconst rimraf = async (path, options, isTop = false) => {\n  const force = isTop ? options.force : true\n  const stat = await fs.lstat(path)\n    .catch((err) => {\n      // we only ignore ENOENT if we're forcing this call\n      if (err.code === 'ENOENT' && force) {\n        return\n      }\n\n      if (isWindows && err.code === 'EPERM') {\n        return fixEPERM(path, options, err, isTop)\n      }\n\n      throw err\n    })\n\n  // no stat object here means either lstat threw an ENOENT, or lstat threw\n  // an EPERM and the fixPERM function took care of things. either way, we're\n  // already done, so return early\n  if (!stat) {\n    return\n  }\n\n  if (stat.isDirectory()) {\n    return rmdir(path, options, null, isTop)\n  }\n\n  return fs.unlink(path)\n    .catch((err) => {\n      if (err.code === 'ENOENT' && force) {\n        return\n      }\n\n      if (err.code === 'EISDIR') {\n        return rmdir(path, options, err, isTop)\n      }\n\n      if (err.code === 'EPERM') {\n        // in windows, we handle this through fixEPERM which will also try to\n        // delete things again. everywhere else since deleting the target as a\n        // file didn't work we go ahead and try to delete it as a directory\n        return isWindows\n          ? fixEPERM(path, options, err, isTop)\n          : rmdir(path, options, err, isTop)\n      }\n\n      throw err\n    })\n}\n\nconst fixEPERM = async (path, options, originalErr, isTop) => {\n  const force = isTop ? options.force : true\n  const targetMissing = await fs.chmod(path, 0o666)\n    .catch((err) => {\n      if (err.code === 'ENOENT' && force) {\n        return true\n      }\n\n      throw originalErr\n    })\n\n  // got an ENOENT above, return now. no file = no problem\n  if (targetMissing) {\n    return\n  }\n\n  // this function does its own lstat rather than calling rimraf again to avoid\n  // infinite recursion for a repeating EPERM\n  const stat = await fs.lstat(path)\n    .catch((err) => {\n      if (err.code === 'ENOENT' && force) {\n        return\n      }\n\n      throw originalErr\n    })\n\n  if (!stat) {\n    return\n  }\n\n  if (stat.isDirectory()) {\n    return rmdir(path, options, originalErr, isTop)\n  }\n\n  return fs.unlink(path)\n}\n\nconst rmdir = async (path, options, originalErr, isTop) => {\n  if (!options.recursive && isTop) {\n    throw originalErr || new ERR_FS_EISDIR(path)\n  }\n  const force = isTop ? options.force : true\n\n  return fs.rmdir(path)\n    .catch(async (err) => {\n      // in Windows, calling rmdir on a file path will fail with ENOENT rather\n      // than ENOTDIR. to determine if that's what happened, we have to do\n      // another lstat on the path. if the path isn't actually gone, we throw\n      // away the ENOENT and replace it with our own ENOTDIR\n      if (isWindows && err.code === 'ENOENT') {\n        const stillExists = await fs.lstat(path).then(() => true, () => false)\n        if (stillExists) {\n          err = new ENOTDIR(path)\n        }\n      }\n\n      // not there, not a problem\n      if (err.code === 'ENOENT' && force) {\n        return\n      }\n\n      // we may not have originalErr if lstat tells us our target is a\n      // directory but that changes before we actually remove it, so\n      // only throw it here if it's set\n      if (originalErr && err.code === 'ENOTDIR') {\n        throw originalErr\n      }\n\n      // the directory isn't empty, remove the contents and try again\n      if (notEmptyCodes.has(err.code)) {\n        const files = await fs.readdir(path)\n        await Promise.all(files.map((file) => {\n          const target = join(path, file)\n          return rimraf(target, options)\n        }))\n        return fs.rmdir(path)\n      }\n\n      throw err\n    })\n}\n\nconst rm = async (path, opts) => {\n  const options = { ...defaultOptions, ...opts }\n  let retries = 0\n\n  const errHandler = async (err) => {\n    if (retryCodes.has(err.code) && ++retries < options.maxRetries) {\n      const delay = retries * options.retryDelay\n      await promiseTimeout(delay)\n      return rimraf(path, options, true).catch(errHandler)\n    }\n\n    throw err\n  }\n\n  return rimraf(path, options, true).catch(errHandler)\n}\n\nconst promiseTimeout = (ms) => new Promise((r) => setTimeout(r, ms))\n\nmodule.exports = rm\n","const { join, sep } = require('path')\n\nconst getOptions = require('./common/get-options.js')\nconst mkdir = require('./mkdir/index.js')\nconst mkdtemp = require('./mkdtemp.js')\nconst rm = require('./rm/index.js')\n\n// create a temp directory, ensure its permissions match its parent, then call\n// the supplied function passing it the path to the directory. clean up after\n// the function finishes, whether it throws or not\nconst withTempDir = async (root, fn, opts) => {\n  const options = getOptions(opts, {\n    copy: ['tmpPrefix'],\n  })\n  // create the directory, and fix its ownership\n  await mkdir(root, { recursive: true, owner: 'inherit' })\n\n  const target = await mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''), { owner: 'inherit' })\n  let err\n  let result\n\n  try {\n    result = await fn(target)\n  } catch (_err) {\n    err = _err\n  }\n\n  try {\n    await rm(target, { force: true, recursive: true })\n  } catch (err) {}\n\n  if (err) {\n    throw err\n  }\n\n  return result\n}\n\nmodule.exports = withTempDir\n","const fs = require('./fs.js')\nconst getOptions = require('./common/get-options.js')\nconst owner = require('./common/owner.js')\n\nconst writeFile = async (file, data, opts) => {\n  const options = getOptions(opts, {\n    copy: ['encoding', 'mode', 'flag', 'signal', 'owner'],\n    wrap: 'encoding',\n  })\n  const { uid, gid } = await owner.validate(file, options.owner)\n\n  const result = await fs.writeFile(file, data, options)\n\n  await owner.update(file, uid, gid)\n\n  return result\n}\n\nmodule.exports = writeFile\n"]}